package com.compomics.mslimscore.gui;

import com.compomics.mslimsdb.accessors.Project;
import com.compomics.mslimsdb.utils.dbDeleteQueryGenerator;
import com.compomics.util.gui.FlamableJFrame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.concurrent.*;


/*
 * deleteGUI.java
 *
 * Created on Aug 19, 2011, 9:03:34 AM
 */

/**
 * @author Davy Maddelein
 */
public class deleteGUI extends FlamableJFrame {
    private static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(deleteGUI.class);


    private javax.swing.JCheckBox chkDeleteIdentification;
    private javax.swing.JCheckBox chkDeleteProject;
    private javax.swing.JCheckBox chkDeleteQuantification;
    private javax.swing.JCheckBox chkDeleteSpectra;
    private javax.swing.JButton btnExecute;
    private JComboBox cmbProjectSelector;
    private Connection iConn = null;
    private JTextField txtID;
    private Project[] iProjects = null;
    private String iCurrentTitle;
    private JTextField txtTitle;
    private String iDBName;
    private int sqlSelection;
    private long currentProject;
    private static boolean iStandAlone = true;


    public deleteGUI(Connection aConn, String aDBName) {
        this.setTitle("Project clearing or deletion tool (connected to " + aDBName + ")");
        this.iConn = aConn;
        this.iDBName = aDBName;
        // Window closing.
        this.addWindowListener(new WindowAdapter() {
            /**
             * Invoked when a window is in the process of being closed.
             * The close operation can be overridden at this point.
             */
            public void windowClosing(WindowEvent e) {
                close();
            }
        });
        //pass connection

        this.passConnection(iConn, iDBName);
        if (iConn == null) {
            close();
        }
        //Now we have a connection, gather all data next.
        this.initComponents(iConn, iDBName);
        try {
            this.fillProjectPulldown();
        } catch (SQLException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        // Display settings.
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((screen.width / 10), (screen.height / 10));
        this.pack();


    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     *
     * @param Conn   the connection to the DB holding all the projects
     * @param DBName name of the DB we are connecting to
     */

    private void initComponents(final Connection Conn, final String DBName) {


        cmbProjectSelector = new JComboBox();
        chkDeleteProject = new javax.swing.JCheckBox();
        chkDeleteSpectra = new javax.swing.JCheckBox();
        chkDeleteIdentification = new javax.swing.JCheckBox();
        chkDeleteQuantification = new javax.swing.JCheckBox();
        btnExecute = new javax.swing.JButton();
        txtID = new JTextField();
        txtTitle = new JTextField();

        if (isStandAlone()) {
            setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        }

        chkDeleteProject.setText("Clear Project");
        chkDeleteProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProjectActionPerformed(evt);
            }
        });

        chkDeleteSpectra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSpectraActionPerformed(evt);
            }
        });
        chkDeleteIdentification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteIdentificationPerformed(evt);
            }
        });

        chkDeleteQuantification.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt) {
                deleteQuantificationPerformed(evt);
            }
        });

        btnExecute.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                try {
                    CountDownLatch doneSignal = new CountDownLatch(1);
                    dbDeleteQueryGenerator sqlexecute = new dbDeleteQueryGenerator(iConn, iDBName, currentProject, sqlSelection,doneSignal);
                    new Thread(sqlexecute).start();
                    doneSignal.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
            }
        });
        cmbProjectSelector.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent ie) {
                if (ie.getStateChange() == ItemEvent.SELECTED) {
                    Project selected = (Project) ie.getItem();
                    stateChangedProject(selected);

                }
            }
        });

        chkDeleteSpectra.setText("Delete Spectra");
        chkDeleteIdentification.setText("Delete Identification");
        chkDeleteQuantification.setText("Delete Quantification");

        btnExecute.setText("Execute");
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(15
                                )
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbProjectSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(chkDeleteProject)
                                        .addComponent(chkDeleteSpectra)
                                        .addComponent(chkDeleteIdentification)
                                        .addComponent(chkDeleteQuantification)))
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                                .addComponent(btnExecute)
                                .addGap(22, 22, 22)
                                .addContainerGap(164, Short.MAX_VALUE)

                        ));
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(cmbProjectSelector, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(27, 27, 27)
                                                .addComponent(chkDeleteProject)
                                                .addGap(18, 18, 18)
                                                .addComponent(chkDeleteSpectra)
                                                .addGap(18, 18, 18)
                                                .addComponent(chkDeleteIdentification)
                                                .addGap(18, 18, 18)
                                                .addComponent(chkDeleteQuantification)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        )
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(248, 248, 248)
                                                .addComponent(btnExecute))))
        );

        pack();

    }

    // checkboxes
    // make checkboxes cascade and unchangeable

    private void deleteProjectActionPerformed(java.awt.event.ActionEvent evt) {
        if (chkDeleteProject.isSelected()) {
            chkDeleteSpectra.setSelected(true);
            chkDeleteSpectra.setEnabled(false);
            chkDeleteIdentification.setSelected(true);
            chkDeleteIdentification.setEnabled(false);
            chkDeleteQuantification.setSelected(true);
            chkDeleteQuantification.setEnabled(false);
            sqlSelection = 4;
        } else {
            chkDeleteSpectra.setSelected(false);
            chkDeleteSpectra.setEnabled(true);
            chkDeleteIdentification.setSelected(false);
            chkDeleteIdentification.setEnabled(true);
            chkDeleteQuantification.setSelected(false);
            chkDeleteQuantification.setEnabled(true);
            sqlSelection = 0;
        }
    }

    private void deleteSpectraActionPerformed(java.awt.event.ActionEvent evt) {
        if (chkDeleteSpectra.isSelected()) {

            chkDeleteIdentification.setSelected(true);
            chkDeleteIdentification.setEnabled(false);
            chkDeleteQuantification.setSelected(true);
            chkDeleteQuantification.setEnabled(false);
            sqlSelection = 3;
        } else {
            chkDeleteIdentification.setSelected(false);
            chkDeleteIdentification.setEnabled(true);
            chkDeleteQuantification.setSelected(false);
            chkDeleteQuantification.setEnabled(true);
            sqlSelection = 0;
        }
    }

    private void deleteIdentificationPerformed(java.awt.event.ActionEvent evt) {
        if (chkDeleteIdentification.isSelected()) {
            chkDeleteQuantification.setSelected(true);
            chkDeleteQuantification.setEnabled(false);
            sqlSelection = 2;
        } else {
            chkDeleteQuantification.setSelected(false);
            chkDeleteQuantification.setEnabled(true);
            sqlSelection = 0;
        }
    }

    private void deleteQuantificationPerformed(ActionEvent evt) {
        if (chkDeleteQuantification.isSelected()) {
            sqlSelection = 1;
        } else {
            sqlSelection = 0;
        }
    }

    //combobox
    private void findProjects() {
        try {

            iProjects = Project.getAllProjects(iConn);
        } catch (SQLException sqle) {
            logger.error(sqle);
        }
    }

    //db
    public void passConnection(Connection aConn, String aDB) {
        if (aConn == null) {
            this.close();
        }
        this.iConn = aConn;
        this.setTitle(iCurrentTitle + " (connected to '" + aDB + "')");
    }

    //cleanup
    private void close() {
        this.setVisible(false);
        this.dispose();
    }

    private void closeConnection() {
        try {
            if (iConn != null) {
                iConn.close();
                logger.info("\nClosed DB connection.\n");
            }
        } catch (SQLException e) {
            logger.error(e.getMessage(), e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(deleteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(deleteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(deleteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(deleteGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    //stand-alone app or not
    public boolean isStandAlone() {
        return iStandAlone;
    }

    public static void setNotStandAlone() {
        iStandAlone = false;
    }

    public static Project[] getAllProjects(Connection aConn) throws SQLException {
        PreparedStatement prep = aConn.prepareStatement("select projectid, l_userid, l_protocolid, title, description, username, creationdate, modificationdate from project order by creationdate desc, title asc");
        ResultSet rs = prep.executeQuery();
        Vector<Project> v = new Vector<Project>();
        while (rs.next()) {
            v.add(new Project(rs));
        }
        rs.close();
        prep.close();
        Project[] lProjects = new Project[v.size()];
        v.toArray(lProjects);

        return lProjects;
    }

    private void fillProjectPulldown() throws SQLException {
        iProjects = Project.getAllProjects(iConn);
        cmbProjectSelector.setModel(new DefaultComboBoxModel(iProjects));
        stateChangedProject((Project) cmbProjectSelector.getSelectedItem());
    }

    private void stateChangedProject(Project aProject) {
        if (aProject != null) {
            txtID.setText(Long.toString(aProject.getProjectid()));
            currentProject = aProject.getProjectid();
            txtTitle.setText(aProject.getTitle());
        }
    }
}